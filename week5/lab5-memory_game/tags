!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/45968eff/
ALL	makefile	/^ALL=$(CC) memgame.hpp # All other files go here.$/;"	m
BIG_NUM	memgame.hpp	/^const long int BIG_NUM = std::numeric_limits<std::streamsize>::max();$/;"	v	typeref:typename:const long int
CARDNUM	memgame.hpp	/^const int CARDNUM = 8;$/;"	v	typeref:typename:const int
CARDS	memgame.hpp	/^const char CARDS[CARDNUM] = { '&','$','#','@','?','%','!','+' };$/;"	v	typeref:typename:const char[]
CC	makefile	/^CC=main.cpp play.cpp board.cpp # Additional cpp files here.$/;"	m
Game	memgame.hpp	/^    Game(): size(4), last(-1), current(-1), tries(0), matches(0) {}$/;"	f	struct:Game
Game	memgame.hpp	/^struct Game {$/;"	s
OUT	makefile	/^OUT=out # Replace with your output file.$/;"	m
__MEM_GAME__	memgame.hpp	/^#define __MEM_GAME__$/;"	d
c	makefile	/^c: $(CC)$/;"	t
checkMove	play.cpp	/^void checkMove( Game & b )$/;"	f	typeref:typename:void
checkWin	play.cpp	/^bool checkWin( Game & b )$/;"	f	typeref:typename:bool
checked	memgame.hpp	/^    bool * checked;$/;"	m	struct:Game	typeref:typename:bool *
cinClear	board.cpp	/^void cinClear()$/;"	f	typeref:typename:void
current	memgame.hpp	/^    int current;$/;"	m	struct:Game	typeref:typename:int
displayBoard	board.cpp	/^void displayBoard( Game & b )$/;"	f	typeref:typename:void
gameExit	play.cpp	/^void gameExit( Game & b )$/;"	f	typeref:typename:void
getMove	play.cpp	/^void getMove( Game & b )$/;"	f	typeref:typename:void
getSize	play.cpp	/^void getSize( Game & b )$/;"	f	typeref:typename:void
grid	memgame.hpp	/^    char * grid;$/;"	m	struct:Game	typeref:typename:char *
intro	board.cpp	/^void intro()$/;"	f	typeref:typename:void
last	memgame.hpp	/^    int last;$/;"	m	struct:Game	typeref:typename:int
main	main.cpp	/^int main()$/;"	f	typeref:typename:int
makeBoard	board.cpp	/^char * makeBoard( const Game & b )$/;"	f	typeref:typename:char *
makeChecked	board.cpp	/^bool * makeChecked( const Game & b )$/;"	f	typeref:typename:bool *
matches	memgame.hpp	/^    int matches;$/;"	m	struct:Game	typeref:typename:int
playAgain	play.cpp	/^bool playAgain( Game & b )$/;"	f	typeref:typename:bool
r	makefile	/^r:$/;"	t
resetGame	board.cpp	/^void resetGame( Game & b )$/;"	f	typeref:typename:void
setup	makefile	/^setup:$/;"	t
size	memgame.hpp	/^    int size;$/;"	m	struct:Game	typeref:typename:int
t	makefile	/^t: $(OUT)$/;"	t
tSize	memgame.hpp	/^    int tSize;$/;"	m	struct:Game	typeref:typename:int
tags	makefile	/^tags: $(ALL)$/;"	t
tries	memgame.hpp	/^    int tries;$/;"	m	struct:Game	typeref:typename:int
waitEnter	play.cpp	/^void waitEnter()$/;"	f	typeref:typename:void
~Game	memgame.hpp	/^    ~Game() {$/;"	f	struct:Game
